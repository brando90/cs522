mod IMP-SEMANTICS-DENOTATIONAL is including IMP-SYNTAX + STATE + CPO .
  sort Syntax .
  subsorts AExp BExp Stmt Pgm < Syntax .
  subsorts Int Bool State < CPO .

  op [[_]] : Syntax  -> CPO .    --- Syntax interpreted in CPOs

  var X : Id . var Xl : List{Id} .  var I : Int .  var A1 A2 A : AExp .
  var T : Bool .  var B1 B2 B : BExp .  var S1 S2 S : Stmt .
  ops sigma alpha arg arg1 arg2 : -> CPOVar .

  *** <new> Adding three new CPO constants (to act as halting signals)
    ops error halting ok : -> CPO .
  ***</new>

*** <new> All equations defining denotational semantics of expressions
*** need to change to account for the new mathematical domain, namely
*** functions from states to pairs (value,state).  No need to add new
*** equations or rules to capture non-determinism, because our current
*** domains do not support non-determinism.
  eq [[I]] = funCPO pi -> tripleCPO(I,2ndCPO(pi),3rdCPO(pi)) .

  eq [[X]] = funCPO pi -> tripleCPO(_`(_`)(1stCPO(pi),X),2ndCPO(pi),3rdCPO(pi)) .

  eq [[A1 + A2]]
   = funCPO pi
     -> appCPO(funCPO arg1
               -> appCPO(funCPO arg2
                         -> ifCPO( 1stCPO(arg1) ==bool error, arg1,
                         ifCPO(1st(arg2)==bool error, tripleCPO(error, 2ndCPO(arg2), 3rd(arg2)),
                            tripleCPO(1stCPO(arg1) +Int 1stCPO(arg2),2nd(arg2),3rd(arg2)) ) ),
                         appCPO([[A2]],pairCPO(2ndCPO(arg1),3rdCPO(arg1)))),
               appCPO([[A1]],pi)) .


   eq [[A1 / A2]]
     = funCPO pi
       -> appCPO(funCPO arg1
                 -> appCPO(funCPO arg2
                           -> ifCPO( 1stCPO(arg1) ==bool error, arg1,
                           ifCPO(1st(arg2)==bool error, tripleCPO(error, 2ndCPO(arg2), 3rd(arg2) ),
                              ifCPO(1st(arg2) ==bool 0, tripleCPO(error, 2ndCPO(arg2), 3rd(arg2) ) ,
                              tripleCPO(1stCPO(arg1) +Int 1stCPO(arg2),2nd(arg2),3rd(arg2))   )),
                           appCPO([[A2]],pairCPO(2ndCPO(arg1),3rdCPO(arg1)))),
                 appCPO([[A1]],pi)) .

  eq [[T]] = funCPO pi -> tripleCPO(T,2ndCPO(pi),3rdCPO(pi)) .

  eq [[A1 <= A2]]
    = funCPO pi
      -> appCPO(funCPO arg1
                -> appCPO(funCPO arg2
                          -> ifCPO( 1stCPO(arg1) ==bool error, arg1,
                          ifCPO(1st(arg2)==bool error, tripleCPO(error, 2ndCPO(arg2), 3rd(arg2)),
                             tripleCPO(1stCPO(arg1) <=Int 1stCPO(arg2),2nd(arg2),3rd(arg2)) ) ),
                          appCPO([[A2]],pairCPO(2ndCPO(arg1),3rdCPO(arg1)))),
                appCPO([[A1]],pi)) .

  eq [[! B]]
   = funCPO pi
     -> appCPO(funCPO arg
               -> tripleCPO(notBool 1stCPO(arg), 2ndCPO(arg), 3rdCPO(arg)),
               appCPO([[B]],pi)) .

   eq [[B1 && B2]]
    = funCPO pi
      -> appCPO(funCPO arg1
                -> ifCPO(1stCPO(arg1) ==bool error, tripleCPO(error,2ndCPO(arg1),3rdCPO(arg1)),
                  ifCPO(1stCPO(arg1),appCPO( [[B2]] ,pairCPO(2ndCPO(arg1),3rdCPO(arg1)) ) ,
                    arg1) ),
                appCPO([[B1]],pi)) .
*** </new>

*** <new> All equations defining the denotational semantics of statements
*** need to change to account for the new mathematical domain, namely
*** functions from pairs (state,input) to pairs (state,input,output,flag).
*** <new> Modify the denotational semantics of all statements to
*** 1) Return pairs (state,input,output,flag), where flag is either halting or ok.
*** 2) Propagate the error or the halting signal

  eq [[{}]] = funCPO pi -> quadrupleCPO(1stCPO(pi),2ndCPO(pi),epsilon,ok) .

  eq [[{S}]] = funCPO pi -> appCPO([[S]],pi) .

*** <new> The following equation also needs to change, to take the
*** side effects of the arithmetic expression into account
eq [[X = A ;]]
 = funCPO pi
   -> appCPO(funCPO arg
             -> ifCPO(arg ==Bool error,
                quadrupleCPO(1stCPO(pi),2ndCPO(pi),epsilon,halting),
                      ifCPO(_`(_`)(pi,X) =/=Bool undefined,
                quadrupleCPO(1stCPO(pi)[1stCPO(arg) / X],2ndCPO(arg),epsilon,ok),
              undefined)),
             appCPO([[A]],pi)) .
*** </new>

  eq [[S1 S2]] = funCPO pi
     -> appCPO(funCPO arg1
               -> appCPO(funCPO arg2
                         ->  ifCPO( 4thCPO(arg1) ==bool ok,
                         quadrupleCPO( 1stCPO(arg2), 2ndCPO(arg2), 3rdCPO(arg1) : 3rdCPO(arg2) , 4thCPO(arg2) ),
                          arg1),
                         appCPO( [[S2]], pairCPO(1stCPO(arg1),2ndCPO(arg1)) ) ),
               appCPO([[S1]],pi)) .

*** <new> The following equations also need to change, to take the
*** side effects of the Boolean expressions into account
  eq [[if (B) S1 else S2]]
   = funCPO sigma
     -> appCPO(funCPO arg
               -> appCPO( ifCPO( 1stCPO(arg) ==bool error, quadrupleCPO( 1stCPO(arg),2ndCPO(arg),epsilon,halting),
               ifCPO(1stCPO(arg), appCPO([[S1]], pairCPO(1st(arg),2nd(arg))), appCPO([[S2]],pairCPO(1st(arg),2nd(arg)) ) )
                , 2ndCPO(arg)),
               appCPO([[B]],sigma)) .

 eq [[while (B) S]]
  = fixCPO(funCPO alpha
      -> funCPO pi
        -> appCPO( funCPO arg1
            -> appCPO( funCPO arg2
                -> appCPO( funCPO arg3
                    -> ifCPO(1stCPO(arg1) ==bool error, quadrupleCPO(2ndCPO(arg1),3rdCPO(arg1),epsilon,halting) , ifCPO(1stCPO(arg1)==bool false, quadrupleCPO(2ndCPO(arg1),3rdCPO(arg1),epsilon,ok) ,ifCPO(4thCPO(arg2)==bool halting,arg2, quadrupleCPO(1stCPO(arg3),2ndCPO(arg3), 3rdCPO(arg2) : 3rdCPO(arg3), 4thCPO(arg3) ) ) ) ) ,
          STATEARG3) ,
        STATEARG2 ),
      STATEARG1 )
      ) .

*** <new> The actual denotational semantics of increment
  eq [[++ X]]
   = funCPO sigma
     -> ifCPO(_`(_`)(sigma,X) =/=Bool undefined,
              quadrupleCPO(_`(_`)(sigma,X) +Int 1, sigma[_`(_`)(sigma,X) +Int 1 / X], 2ndCPO(sigma),epsilon,ok),
              undefined) .
*** </new>

*** <new>  Actual denotational semantics for spawn.
*** Unfortunately, non-determinism cannot be supported with our current mathematical
*** domains, and changing the domains to support non-determinism is non-trivial
*** because power domains are required and leads to rather inefficient interpreters.
*** Consequently, we don't really spawn; just execute the spawn statement sequentially.
  eq [[spawn S]] = [[S]] .
*** </new>

*** <new> Added the denotational semantics of let
  eq [[let X = A in S]]
   = funCPO sigma
     -> appCPO( [[S]],sigma[appCPO([[A]],sigma) / X])[_`(_`)(sigma,X) / X] .
*** </new>

*** <new> Removed the denotational semantics of programs, because programs
*** are now just statements, so the semantics above suffices.
---  eq [[(int Xl ; S)]] = appCPO([[S]],(Xl |-> 0)) .
*** </new>

endm
