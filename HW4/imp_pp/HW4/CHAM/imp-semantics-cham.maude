mod IMP-SEMANTICS-CHAM is including IMP-HEATING-COOLING-CHAM + STATE .
  subsort Pgm State < Molecule .
  var X : Id .  var Xl : List{Id} .  var C : Molecule .  var Ms : Bag{Molecule} .
  var Sigma : State .  var B B2 : BExp .  var I J I1 I2 : Int .  var S S1 S2 : Stmt .
  rl {| {| X ~> C |} # {| X |-> I & Sigma |} # Ms |} => {| {| I ~> C |} # {| X |-> I & Sigma |} # Ms |} .
  rl {| (I1 + I2 ~> C) # Ms |} => {| (I1 +Int I2 ~> C) # Ms |} .
 crl {| (I1 / I2 ~> C) # Ms |} => {| (I1 /Int I2 ~> C) # Ms |} if I2 =/=Bool 0 .
  rl {| (I1 <= I2 ~> C) # Ms |} => {| (I1 <=Int I2 ~> C) # Ms |} .
  rl {| (! true ~> C) # Ms |} => {| (false ~> C) # Ms |} .
  rl {| (! false ~> C) # Ms |} => {| (true ~> C) # Ms |} .
  rl {| (true && B2 ~> C) # Ms |} => {| (B2 ~> C) # Ms |} .
  rl {| (false && B2 ~> C) # Ms |} => {| (false ~> C) # Ms |} .
  rl {| ({S} ~> C) # Ms |} => {| (S ~> C) # Ms |} .
  rl {| {| X = I ; ~> C |} # {| X |-> J & Sigma |} # Ms |} => {| {| {} ~> C |} # {| X |-> I & Sigma |} # Ms |} .
  rl {| ({} S2 ~> C) # Ms |} => {| (S2 ~> C) # Ms |} .
  rl {| (if (true) S1 else S2 ~> C) # Ms |} => {| (S1 ~> C) # Ms |} .
  rl {| (if (false) S1 else S2 ~> C) # Ms |} => {| (S2 ~> C) # Ms |} .
  rl {| (while (B) S ~> C) # Ms |} => {| (if (B) {S while (B) S} else {} ~> C) # Ms |} .

  *** <new> The actual CHAM rule of increment
    rl {| {| ++ X ~> C |} # {| X |-> I & Sigma |} # Ms |}
    => {| {| I +Int 1 ~> C |} # {| X |-> (I +Int 1) & Sigma |} # Ms |} .
  *** </new>

  *** <new> Changed the rule below to initialize the input and the (empty) output buffers.
---  rl {| {| int Xl ; S |} # {| OmegaIn |} # Ms |} => {| {| S |} # {| Xl |-> 0 |} # {| input # OmegaIn |} # {| output # epsilon |} # Ms |} .
  *** </new>

  *** <new> Actual CHAM semantics of input/output
    var OmegaIn OmegaOut : Buffer .
    rl {| {| read() ~> C |} # {| input # I : OmegaIn |} # Ms |} => {| {| I ~> C |} # {| input # OmegaIn |} # Ms |} .
    rl {| {| print(I); ~> C |} # {| output # OmegaOut |} # Ms |} => {| {| {} ~> C |} # {| output # OmegaOut : I |} # Ms |} .
  *** </new>

  *** <new> Actual CHAM semantics for division-by-zero and halt
    rl {| ( I / 0 ~> C) # Ms |} => {| {} # Ms |} .
    rl {| (halt ; ~> C) # Ms |} => {| {} # Ms |} .
  *** </new>

*** <new> Actual CHAM semantics for spawn
  op die : -> Molecule .
  rl {| {| spawn S ~> C |} # Ms |} => {| {| {} ~> C |} # {| S ~> die |} # Ms |} .
  rl {| {| {} ~> die |} # Ms |} => {| Ms |} .
*** </new>

*** <new> The rule below is not needed anymore:
---  rl {| (int Xl ; S) # Ms |} => {| {| S |} # {| Xl |-> 0 |} # Ms |} .
*** </new>

*** <new> Added the CHAM rule for let
  rl {| {| let X = I in S ~> C |} # {| Sigma |} # Ms |} => {| {| S  X = _`(_`)(Sigma,X) ; ~> C |} # {| Sigma[I / X] |} # Ms |} .
*** </new>
endm
