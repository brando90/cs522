mod IMP-CONFIGURATIONS-BIGSTEP is including IMP-SYNTAX + STATE .
  sort Configuration .
  op <_,_> : AExp State -> Configuration .
  op   <_> : Int -> Configuration .
  op <_,_> : BExp State -> Configuration .
  op   <_> : Bool -> Configuration .
  op <_,_> : Stmt State -> Configuration .
  op   <_> : State -> Configuration .
  op   <_> : Pgm -> Configuration .
  ---
  op Error : -> State .
endm

mod IMP-SEMANTICS-BIGSTEP is including IMP-CONFIGURATIONS-BIGSTEP .
  var X : Id .  var Xl : List{Id} .  var Sigma Sigma' Sigma1 Sigma2 : State .
  var I I1 I2 : Int .  var T : Bool .
  var A A1 A2 : AExp .  var B B1 B2 : BExp .  var S S1 S2 : Stmt .

--- AExp's
 crl < I, Sigma > => < Error > if Sigma ==Bool Error .
 crl < I, Sigma > => < I > if Sigma =/=Bool Error .
 crl < X, Sigma > => < Sigma(X) > if Sigma(X) =/=Bool undefined .
 --- ADD
 crl < A1 + A2 , Sigma > => < I1 +Int I2 > if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > .
 crl < A1 + A2 , Sigma > => < Error > if < A1, Sigma > => < Error >  .
 crl < A1 + A2 , Sigma > => < Error > if < A2, Sigma > => < Error >  .
 --- DIV
 crl < A1 / A2 , Sigma > => < I1 /Int I2 > if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > /\ I2 =/=Bool 0 .
 crl < A1 / A2 , Sigma > => < Error > if < A2,Sigma > => < 0 > .

--- BExp's
 --- truth in a state
  rl < T, Sigma > => if Sigma ==Bool Error then < Sigma > else < T > fi .
 --- Less than or equal <=
 crl < A1 <= A2,Sigma > => < I1 <=Int I2 > if < A1,Sigma > => < I1 > /\ < A2,Sigma > => < I2 > .
 crl < I1 <= A2,Sigma > => < Error > if < A2,Sigma > => < Error > .
 crl < A1 <= A2,Sigma > => < Error > if < A1,Sigma > => < Error > .
 --- Not
 crl < ! B,Sigma > => < false > if < B,Sigma > => < true > .
 crl < ! B,Sigma > => < true > if < B,Sigma > => < false > .
 crl < ! B,Sigma > => < Error > if Sigma ==Bool Error .
 crl < ! B,Sigma > => < Error > if < B,Sigma > => < Error > .
 --- AND
 crl < B1 && B2,Sigma > => < false > if < B1,Sigma > => < false > .
 crl < B1 && B2,Sigma > => < false > if < B2,Sigma > => < false > .
 crl < B1 && B2,Sigma > => < T > if < B1,Sigma > => < true > /\ < B2,Sigma > => < T > .
 crl < B1 && B2,Sigma > => < Error > if < B1,Sigma > => < Error > .
 crl < B1 && B2,Sigma > => < Error > if < B2,Sigma > => < Error > .

---
  ---rl < S, Error > => < Error > .
  rl < {}, Sigma > => < Sigma > .
  
 crl < {S}, Sigma > => < Sigma' > if < S,Sigma > => < Sigma' > .
 crl < X = A ; , Sigma > => < Error > if < A,Sigma > => < Error > /\ Sigma(X) =/=Bool undefined .

 crl < X = A ;,Sigma > => < Sigma[I / X] >
  if < A,Sigma > => < I > /\ Sigma(X) =/=Bool undefined .

 crl < S1 S2,Sigma > => < Sigma2 >
  if < S1,Sigma > => < Sigma1 > /\ < S2,Sigma1 > => < Sigma2 > .
 crl < if (B) S1 else S2,Sigma > => < Sigma1 >
  if < B,Sigma > => < true > /\ < S1,Sigma > => < Sigma1 > .
 crl < if (B) S1 else S2,Sigma > => < Sigma2 >
  if < B,Sigma > => < false > /\ < S2,Sigma > => < Sigma2 > .
 crl < while (B) S,Sigma > => < Sigma >
  if < B,Sigma > => < false > .
 crl < while (B) S,Sigma > => < Sigma' >
  if < B,Sigma > => < true > /\ < S while (B) S,Sigma > => < Sigma' > .

 crl < int Xl ; S > => < Sigma >
  if < S,(Xl |-> 0) > => < Sigma > .
endm
