mod IMP-SEMANTICS-DENOTATIONAL is including IMP-SYNTAX + STATE + CPO .
  sort Syntax .
  subsorts AExp BExp Stmt Pgm < Syntax .
  subsorts Int Bool State < CPO .
  ---subsorts Error < State .

  op [[_]] : Syntax  -> CPO .    --- Syntax interpreted in CPOs
  op Error : -> State .
  op err : -> Id .
  ---op <_,_> : Syntax Syntax -> CPO .

  var X : Id . var Xl : List{Id} .  var I : Int .  var A1 A2 A : AExp .
  var T : Bool .  var B1 B2 B : BExp .  var S1 S2 S : Stmt .
  ---var A B : Int .
  ---var err : Id .
  ---var Sigma Sigma' Sigma1 Sigma2 : State .
  ops sigma alpha arg : -> CPOVar .

---eq <A,B> = funCPO sigma -> ifCPO(sigma ==Bool 0, A, B) .
---eq [[A,B]] = funCPO sigma -> ifCPO(sigma ==Bool 0, A, B) .

--- Arithmetic expressions
  eq [[I]] = funCPO sigma -> I .

  eq [[X]] = funCPO sigma -> _`(_`)(sigma,X) .

  --- addition
  eq [[A1 + A2]] = funCPO sigma -> ifCPO( appCPO([[A1]],sigma) ==Bool Error, Error,
    ifCPO( appCPO([[A2]],sigma) ==Bool Error, Error,
    appCPO([[A1]],sigma) +Int appCPO([[A2]],sigma) ) ) .

  --- division
  eq [[A1 / A2]] = funCPO sigma -> ifCPO( appCPO([[A2]],sigma) ==Bool 0, Error,
    ifCPO( appCPO([[A1]],sigma) ==Bool Error, Error,
    ifCPO( appCPO([[A2]],sigma) ==Bool Error, Error,
    appCPO([[A1]],sigma) /Int appCPO([[A2]],sigma) ) ) ) .

--- Boolean
  eq [[T]] = funCPO sigma -> T .

  eq [[A1 <= A2]] = funCPO sigma -> ifCPO( appCPO([[A1]],sigma) ==Bool Error, Error,
    ifCPO( appCPO([[A2]],sigma) ==Bool Error, Error,
    appCPO([[A1]],sigma) <=Int appCPO([[A2]],sigma) ) ) .

  eq [[! B]] = funCPO sigma -> ifCPO( appCPO([[B]],sigma) ==Bool Error, Error, notBool appCPO([[B]],sigma) ) .

  --- the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression
  eq [[B1 && B2]] = funCPO sigma -> ifCPO(appCPO([[B1]],sigma) ==Bool Error, Error, ifCPO(appCPO([[B1]],sigma), ifCPO(appCPO([[B2]],sigma) ==Bool Error, Error, appCPO([[B2]],sigma)) ,false) ) .

--- Statements
  eq [[{}]] = funCPO sigma -> sigma .

  eq [[{S}]] = funCPO sigma -> appCPO([[S]],sigma) .

  --- assignment sigma[arg / X]
  eq [[X = A ;]]
   = funCPO sigma
     -> ifCPO( appCPO([[A]],sigma) ==Bool Error, (sigma & err |-> 1), appCPO(funCPO arg
               -> ifCPO(_`(_`)(sigma,X) =/=Bool undefined, sigma[arg / X], undefined),
               appCPO([[A]],sigma)) ) .

  ---eq [[S1 S2]] = funCPO sigma -> appCPO([[S2]],appCPO([[S1]],sigma)) .
  eq [[S1 S2]] = funCPO sigma -> ifCPO( _`(_`)( appCPO([[S1]],sigma) ,err) ==Bool undefined, appCPO([[S2]],appCPO([[S1]],sigma)) ,appCPO([[S1]],sigma) ) .

  ---   eq [[if (B) S1 else S2]] = funCPO sigma -> ifCPO(appCPO([[B]],sigma),appCPO([[S1]],sigma),appCPO([[S2]],sigma)) .
  eq [[if (B) S1 else S2]]
    = funCPO sigma -> ifCPO( appCPO([[B]],sigma) ==Bool Error , (sigma & err |-> 1) , ifCPO(appCPO([[B]],sigma),appCPO([[S1]],sigma),appCPO([[S2]],sigma)) ) .

  --- eq [[while (B) S]] = fixCPO(funCPO alpha -> funCPO sigma -> ifCPO(appCPO([[B]],sigma), appCPO(alpha,appCPO([[S]],sigma)), sigma)    ) .

  eq [[while (B) S]]
   = fixCPO(funCPO alpha
            -> funCPO sigma
               ->  ifCPO( appCPO([[B]],sigma), ifCPO( _`(_`)( appCPO([[S]],sigma) ,err) ==Bool undefined, appCPO(alpha,appCPO([[S]],sigma)), appCPO([[S]],sigma) ), sigma ) ) .

  eq [[(int Xl ; S)]] = appCPO([[S]],(Xl |-> 0)) .
endm
